import os
import json
import string
from collections import Counter
import spacy

nlp = spacy.load("en_core_web_sm")

STOP_WORDS = [
    "call",
    "upon",
    "still",
    "nevertheless",
    "forty",
    "‘re",
    "always",
    "side",
    "n't",
    "now",
    "however",
    "an",
    "did",
    "which",
    "'s",
    "nowhere",
    "per",
    "hereupon",
    "yours",
    "she",
    "moreover",
    "eight",
    "few",
    "has",
    "so",
    "have",
    "for",
    "noone",
    "were",
    "those",
    "thence",
    "eleven",
    "no",
    "’ll",
    "others",
    "ourselves",
    "themselves",
    "though",
    "that",
    "nor",
    "just",
    "’s",
    "before",
    "had",
    "another",
    "should",
    "herself",
    "and",
    "these",
    "such",
    "indeed",
    "anyone",
    "his",
    "each",
    "then",
    "both",
    "became",
    "third",
    "whom",
    "‘ve",
    "mine",
    "take",
    "many",
    "anywhere",
    "to",
    "well",
    "thereafter",
    "besides",
    "fifteen",
    "none",
    "be",
    "herein",
    "two",
    "using",
    "whatever",
    "please",
    "perhaps",
    "ca",
    "we",
    "latterly",
    "here",
    "therefore",
    "us",
    "how",
    "was",
    "made",
    "the",
    "or",
    "may",
    "’re",
    "namely",
    "'ve",
    "anyway",
    "amongst",
    "used",
    "ever",
    "of",
    "there",
    "than",
    "why",
    "really",
    "whither",
    "in",
    "only",
    "last",
    "own",
    "therein",
    "‘m",
    "wherever",
    "either",
    "someone",
    "doing",
    "on",
    "rather",
    "ours",
    "again",
    "‘s",
    "latter",
    "during",
    "done",
    "'re",
    "'m",
    "much",
    "neither",
    "among",
    "seemed",
    "into",
    "once",
    "my",
    "otherwise",
    "never",
    "myself",
    "must",
    "will",
    "am",
    "can",
    "else",
    "although",
    "as",
    "are",
    "too",
    "does",
    "a",
    "everyone",
    "but",
    "some",
    "regarding",
    "‘ll",
    "against",
    "throughout",
    "yourselves",
    "him",
    "'d",
    "it",
    "himself",
    "whether",
    "’m",
    "re",
    "while",
    "whoever",
    "your",
    "first",
    "amount",
    "twelve",
    "serious",
    "other",
    "any",
    "off",
    "four",
    "itself",
    "nothing",
    "out",
    "very",
    "already",
    "until",
    "hers",
    "they",
    "not",
    "them",
    "where",
    "would",
    "since",
    "everything",
    "at",
    "together",
    "yet",
    "more",
    "six",
    "back",
    "with",
    "thereupon",
    "due",
    "keep",
    "somehow",
    "n‘t",
    "when",
    "i",
    "nine",
    "five",
    "been",
    "name",
    "hence",
    "ten",
    "from",
    "whereupon",
    "hereby",
    "'ll",
    "alone",
    "something",
    "behind",
    "’d",
    "its",
    "most",
    "n’t",
    "might",
    "whereas",
    "anything",
    "if",
    "her",
    "via",
    "fifty",
    "is",
    "thereby",
    "twenty",
    "often",
    "whereafter",
    "their",
    "also",
    "anyhow",
    "cannot",
    "our",
    "could",
    "because",
    "who",
    "beside",
    "by",
    "whence",
    "being",
    "meanwhile",
    "this",
    "whenever",
    "mostly",
    "what",
    "one",
    "nobody",
    "do",
    "‘d",
    "say",
    "thus",
    "unless",
    "yourself",
    "former",
    "thru",
    "he",
    "hundred",
    "three",
    "sixty",
    "me",
    "whose",
    "you",
    "quite",
    "’ve",
    "even",
    "first",
    "second",
    "third",
    "fourth",
    "fifth",
    "one",
    "two",
    "three",
    "four",
    "five",
]


def is_word(token):
    if token not in string.punctuation:
        if not any(chr.isdigit() for chr in token):
            return True
    return False


def count_word_freqs(in_file):
    vocab = []
    with open(os.path.join(in_file), "r") as f:
        expressions = json.load(f)
        for type, info in expressions.items():
            for references in info.values():
                for ref in references:
                    doc = nlp(ref)
                    lemmas = [token.lemma_.lower() for token in doc]
                    for lemma in lemmas:
                        if is_word(lemma) and lemma not in STOP_WORDS:
                            vocab.append(lemma)
    word_freq = dict(Counter(vocab).most_common(15))
    return word_freq
